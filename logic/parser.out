Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> formula
Rule 1     formula -> atom
Rule 2     formula -> negation
Rule 3     formula -> conjunction
Rule 4     formula -> disjunction
Rule 5     formula -> implication
Rule 6     formula -> equivalence
Rule 7     formula -> quantified_formula
Rule 8     variable_seq -> VARIABLE
Rule 9     variable_seq -> VARIABLE COMMA variable_seq
Rule 10    atom -> PREDICATE LPAREN variable_seq RPAREN
Rule 11    all_quantified_formula -> ALL variable_seq formula
Rule 12    all_quantified_formula -> ALL variable_seq COMMA formula
Rule 13    exist_quantified_formula -> EXISTS variable_seq formula
Rule 14    exist_quantified_formula -> EXISTS variable_seq COMMA formula
Rule 15    quantified_formula -> all_quantified_formula
Rule 16    quantified_formula -> exist_quantified_formula
Rule 17    negation -> NEGATION formula
Rule 18    conjunction -> LPAREN formula CONJUNCTION formula RPAREN
Rule 19    conjunction -> formula CONJUNCTION formula
Rule 20    disjunction -> LPAREN formula DISJUNCTION formula RPAREN
Rule 21    disjunction -> formula DISJUNCTION formula
Rule 22    implication -> LPAREN formula IMPLICATION formula RPAREN
Rule 23    implication -> formula IMPLICATION formula
Rule 24    equivalence -> LPAREN formula EQUIVALENCE formula RPAREN
Rule 25    equivalence -> formula EQUIVALENCE formula

Terminals, with rules where they appear

ALL                  : 11 12
COMMA                : 9 12 14
CONJUNCTION          : 18 19
DISJUNCTION          : 20 21
EQUIVALENCE          : 24 25
EXISTS               : 13 14
IMPLICATION          : 22 23
LPAREN               : 10 18 20 22 24
NEGATION             : 17
PREDICATE            : 10
RPAREN               : 10 18 20 22 24
VARIABLE             : 8 9
error                : 

Nonterminals, with rules where they appear

all_quantified_formula : 15
atom                 : 1
conjunction          : 3
disjunction          : 4
equivalence          : 6
exist_quantified_formula : 16
formula              : 11 12 13 14 17 18 18 19 19 20 20 21 21 22 22 23 23 24 24 25 25 0
implication          : 5
negation             : 2
quantified_formula   : 7
variable_seq         : 9 10 11 12 13 14

Parsing method: LALR

state 0

    (0) S' -> . formula
    (1) formula -> . atom
    (2) formula -> . negation
    (3) formula -> . conjunction
    (4) formula -> . disjunction
    (5) formula -> . implication
    (6) formula -> . equivalence
    (7) formula -> . quantified_formula
    (10) atom -> . PREDICATE LPAREN variable_seq RPAREN
    (17) negation -> . NEGATION formula
    (18) conjunction -> . LPAREN formula CONJUNCTION formula RPAREN
    (19) conjunction -> . formula CONJUNCTION formula
    (20) disjunction -> . LPAREN formula DISJUNCTION formula RPAREN
    (21) disjunction -> . formula DISJUNCTION formula
    (22) implication -> . LPAREN formula IMPLICATION formula RPAREN
    (23) implication -> . formula IMPLICATION formula
    (24) equivalence -> . LPAREN formula EQUIVALENCE formula RPAREN
    (25) equivalence -> . formula EQUIVALENCE formula
    (15) quantified_formula -> . all_quantified_formula
    (16) quantified_formula -> . exist_quantified_formula
    (11) all_quantified_formula -> . ALL variable_seq formula
    (12) all_quantified_formula -> . ALL variable_seq COMMA formula
    (13) exist_quantified_formula -> . EXISTS variable_seq formula
    (14) exist_quantified_formula -> . EXISTS variable_seq COMMA formula

    PREDICATE       shift and go to state 9
    NEGATION        shift and go to state 11
    LPAREN          shift and go to state 10
    ALL             shift and go to state 14
    EXISTS          shift and go to state 15

    formula                        shift and go to state 1
    atom                           shift and go to state 2
    negation                       shift and go to state 3
    conjunction                    shift and go to state 4
    disjunction                    shift and go to state 5
    implication                    shift and go to state 6
    equivalence                    shift and go to state 7
    quantified_formula             shift and go to state 8
    all_quantified_formula         shift and go to state 12
    exist_quantified_formula       shift and go to state 13

state 1

    (0) S' -> formula .
    (19) conjunction -> formula . CONJUNCTION formula
    (21) disjunction -> formula . DISJUNCTION formula
    (23) implication -> formula . IMPLICATION formula
    (25) equivalence -> formula . EQUIVALENCE formula

    CONJUNCTION     shift and go to state 16
    DISJUNCTION     shift and go to state 17
    IMPLICATION     shift and go to state 18
    EQUIVALENCE     shift and go to state 19


state 2

    (1) formula -> atom .

    CONJUNCTION     reduce using rule 1 (formula -> atom .)
    DISJUNCTION     reduce using rule 1 (formula -> atom .)
    IMPLICATION     reduce using rule 1 (formula -> atom .)
    EQUIVALENCE     reduce using rule 1 (formula -> atom .)
    $end            reduce using rule 1 (formula -> atom .)
    RPAREN          reduce using rule 1 (formula -> atom .)


state 3

    (2) formula -> negation .

    CONJUNCTION     reduce using rule 2 (formula -> negation .)
    DISJUNCTION     reduce using rule 2 (formula -> negation .)
    IMPLICATION     reduce using rule 2 (formula -> negation .)
    EQUIVALENCE     reduce using rule 2 (formula -> negation .)
    $end            reduce using rule 2 (formula -> negation .)
    RPAREN          reduce using rule 2 (formula -> negation .)


state 4

    (3) formula -> conjunction .

    CONJUNCTION     reduce using rule 3 (formula -> conjunction .)
    DISJUNCTION     reduce using rule 3 (formula -> conjunction .)
    IMPLICATION     reduce using rule 3 (formula -> conjunction .)
    EQUIVALENCE     reduce using rule 3 (formula -> conjunction .)
    $end            reduce using rule 3 (formula -> conjunction .)
    RPAREN          reduce using rule 3 (formula -> conjunction .)


state 5

    (4) formula -> disjunction .

    CONJUNCTION     reduce using rule 4 (formula -> disjunction .)
    DISJUNCTION     reduce using rule 4 (formula -> disjunction .)
    IMPLICATION     reduce using rule 4 (formula -> disjunction .)
    EQUIVALENCE     reduce using rule 4 (formula -> disjunction .)
    $end            reduce using rule 4 (formula -> disjunction .)
    RPAREN          reduce using rule 4 (formula -> disjunction .)


state 6

    (5) formula -> implication .

    CONJUNCTION     reduce using rule 5 (formula -> implication .)
    DISJUNCTION     reduce using rule 5 (formula -> implication .)
    IMPLICATION     reduce using rule 5 (formula -> implication .)
    EQUIVALENCE     reduce using rule 5 (formula -> implication .)
    $end            reduce using rule 5 (formula -> implication .)
    RPAREN          reduce using rule 5 (formula -> implication .)


state 7

    (6) formula -> equivalence .

    CONJUNCTION     reduce using rule 6 (formula -> equivalence .)
    DISJUNCTION     reduce using rule 6 (formula -> equivalence .)
    IMPLICATION     reduce using rule 6 (formula -> equivalence .)
    EQUIVALENCE     reduce using rule 6 (formula -> equivalence .)
    $end            reduce using rule 6 (formula -> equivalence .)
    RPAREN          reduce using rule 6 (formula -> equivalence .)


state 8

    (7) formula -> quantified_formula .

    CONJUNCTION     reduce using rule 7 (formula -> quantified_formula .)
    DISJUNCTION     reduce using rule 7 (formula -> quantified_formula .)
    IMPLICATION     reduce using rule 7 (formula -> quantified_formula .)
    EQUIVALENCE     reduce using rule 7 (formula -> quantified_formula .)
    $end            reduce using rule 7 (formula -> quantified_formula .)
    RPAREN          reduce using rule 7 (formula -> quantified_formula .)


state 9

    (10) atom -> PREDICATE . LPAREN variable_seq RPAREN

    LPAREN          shift and go to state 20


state 10

    (18) conjunction -> LPAREN . formula CONJUNCTION formula RPAREN
    (20) disjunction -> LPAREN . formula DISJUNCTION formula RPAREN
    (22) implication -> LPAREN . formula IMPLICATION formula RPAREN
    (24) equivalence -> LPAREN . formula EQUIVALENCE formula RPAREN
    (1) formula -> . atom
    (2) formula -> . negation
    (3) formula -> . conjunction
    (4) formula -> . disjunction
    (5) formula -> . implication
    (6) formula -> . equivalence
    (7) formula -> . quantified_formula
    (10) atom -> . PREDICATE LPAREN variable_seq RPAREN
    (17) negation -> . NEGATION formula
    (18) conjunction -> . LPAREN formula CONJUNCTION formula RPAREN
    (19) conjunction -> . formula CONJUNCTION formula
    (20) disjunction -> . LPAREN formula DISJUNCTION formula RPAREN
    (21) disjunction -> . formula DISJUNCTION formula
    (22) implication -> . LPAREN formula IMPLICATION formula RPAREN
    (23) implication -> . formula IMPLICATION formula
    (24) equivalence -> . LPAREN formula EQUIVALENCE formula RPAREN
    (25) equivalence -> . formula EQUIVALENCE formula
    (15) quantified_formula -> . all_quantified_formula
    (16) quantified_formula -> . exist_quantified_formula
    (11) all_quantified_formula -> . ALL variable_seq formula
    (12) all_quantified_formula -> . ALL variable_seq COMMA formula
    (13) exist_quantified_formula -> . EXISTS variable_seq formula
    (14) exist_quantified_formula -> . EXISTS variable_seq COMMA formula

    PREDICATE       shift and go to state 9
    NEGATION        shift and go to state 11
    LPAREN          shift and go to state 10
    ALL             shift and go to state 14
    EXISTS          shift and go to state 15

    formula                        shift and go to state 21
    atom                           shift and go to state 2
    negation                       shift and go to state 3
    conjunction                    shift and go to state 4
    disjunction                    shift and go to state 5
    implication                    shift and go to state 6
    equivalence                    shift and go to state 7
    quantified_formula             shift and go to state 8
    all_quantified_formula         shift and go to state 12
    exist_quantified_formula       shift and go to state 13

state 11

    (17) negation -> NEGATION . formula
    (1) formula -> . atom
    (2) formula -> . negation
    (3) formula -> . conjunction
    (4) formula -> . disjunction
    (5) formula -> . implication
    (6) formula -> . equivalence
    (7) formula -> . quantified_formula
    (10) atom -> . PREDICATE LPAREN variable_seq RPAREN
    (17) negation -> . NEGATION formula
    (18) conjunction -> . LPAREN formula CONJUNCTION formula RPAREN
    (19) conjunction -> . formula CONJUNCTION formula
    (20) disjunction -> . LPAREN formula DISJUNCTION formula RPAREN
    (21) disjunction -> . formula DISJUNCTION formula
    (22) implication -> . LPAREN formula IMPLICATION formula RPAREN
    (23) implication -> . formula IMPLICATION formula
    (24) equivalence -> . LPAREN formula EQUIVALENCE formula RPAREN
    (25) equivalence -> . formula EQUIVALENCE formula
    (15) quantified_formula -> . all_quantified_formula
    (16) quantified_formula -> . exist_quantified_formula
    (11) all_quantified_formula -> . ALL variable_seq formula
    (12) all_quantified_formula -> . ALL variable_seq COMMA formula
    (13) exist_quantified_formula -> . EXISTS variable_seq formula
    (14) exist_quantified_formula -> . EXISTS variable_seq COMMA formula

    PREDICATE       shift and go to state 9
    NEGATION        shift and go to state 11
    LPAREN          shift and go to state 10
    ALL             shift and go to state 14
    EXISTS          shift and go to state 15

    formula                        shift and go to state 22
    atom                           shift and go to state 2
    negation                       shift and go to state 3
    conjunction                    shift and go to state 4
    disjunction                    shift and go to state 5
    implication                    shift and go to state 6
    equivalence                    shift and go to state 7
    quantified_formula             shift and go to state 8
    all_quantified_formula         shift and go to state 12
    exist_quantified_formula       shift and go to state 13

state 12

    (15) quantified_formula -> all_quantified_formula .

    CONJUNCTION     reduce using rule 15 (quantified_formula -> all_quantified_formula .)
    DISJUNCTION     reduce using rule 15 (quantified_formula -> all_quantified_formula .)
    IMPLICATION     reduce using rule 15 (quantified_formula -> all_quantified_formula .)
    EQUIVALENCE     reduce using rule 15 (quantified_formula -> all_quantified_formula .)
    $end            reduce using rule 15 (quantified_formula -> all_quantified_formula .)
    RPAREN          reduce using rule 15 (quantified_formula -> all_quantified_formula .)


state 13

    (16) quantified_formula -> exist_quantified_formula .

    CONJUNCTION     reduce using rule 16 (quantified_formula -> exist_quantified_formula .)
    DISJUNCTION     reduce using rule 16 (quantified_formula -> exist_quantified_formula .)
    IMPLICATION     reduce using rule 16 (quantified_formula -> exist_quantified_formula .)
    EQUIVALENCE     reduce using rule 16 (quantified_formula -> exist_quantified_formula .)
    $end            reduce using rule 16 (quantified_formula -> exist_quantified_formula .)
    RPAREN          reduce using rule 16 (quantified_formula -> exist_quantified_formula .)


state 14

    (11) all_quantified_formula -> ALL . variable_seq formula
    (12) all_quantified_formula -> ALL . variable_seq COMMA formula
    (8) variable_seq -> . VARIABLE
    (9) variable_seq -> . VARIABLE COMMA variable_seq

    VARIABLE        shift and go to state 24

    variable_seq                   shift and go to state 23

state 15

    (13) exist_quantified_formula -> EXISTS . variable_seq formula
    (14) exist_quantified_formula -> EXISTS . variable_seq COMMA formula
    (8) variable_seq -> . VARIABLE
    (9) variable_seq -> . VARIABLE COMMA variable_seq

    VARIABLE        shift and go to state 24

    variable_seq                   shift and go to state 25

state 16

    (19) conjunction -> formula CONJUNCTION . formula
    (1) formula -> . atom
    (2) formula -> . negation
    (3) formula -> . conjunction
    (4) formula -> . disjunction
    (5) formula -> . implication
    (6) formula -> . equivalence
    (7) formula -> . quantified_formula
    (10) atom -> . PREDICATE LPAREN variable_seq RPAREN
    (17) negation -> . NEGATION formula
    (18) conjunction -> . LPAREN formula CONJUNCTION formula RPAREN
    (19) conjunction -> . formula CONJUNCTION formula
    (20) disjunction -> . LPAREN formula DISJUNCTION formula RPAREN
    (21) disjunction -> . formula DISJUNCTION formula
    (22) implication -> . LPAREN formula IMPLICATION formula RPAREN
    (23) implication -> . formula IMPLICATION formula
    (24) equivalence -> . LPAREN formula EQUIVALENCE formula RPAREN
    (25) equivalence -> . formula EQUIVALENCE formula
    (15) quantified_formula -> . all_quantified_formula
    (16) quantified_formula -> . exist_quantified_formula
    (11) all_quantified_formula -> . ALL variable_seq formula
    (12) all_quantified_formula -> . ALL variable_seq COMMA formula
    (13) exist_quantified_formula -> . EXISTS variable_seq formula
    (14) exist_quantified_formula -> . EXISTS variable_seq COMMA formula

    PREDICATE       shift and go to state 9
    NEGATION        shift and go to state 11
    LPAREN          shift and go to state 10
    ALL             shift and go to state 14
    EXISTS          shift and go to state 15

    formula                        shift and go to state 26
    atom                           shift and go to state 2
    negation                       shift and go to state 3
    conjunction                    shift and go to state 4
    disjunction                    shift and go to state 5
    implication                    shift and go to state 6
    equivalence                    shift and go to state 7
    quantified_formula             shift and go to state 8
    all_quantified_formula         shift and go to state 12
    exist_quantified_formula       shift and go to state 13

state 17

    (21) disjunction -> formula DISJUNCTION . formula
    (1) formula -> . atom
    (2) formula -> . negation
    (3) formula -> . conjunction
    (4) formula -> . disjunction
    (5) formula -> . implication
    (6) formula -> . equivalence
    (7) formula -> . quantified_formula
    (10) atom -> . PREDICATE LPAREN variable_seq RPAREN
    (17) negation -> . NEGATION formula
    (18) conjunction -> . LPAREN formula CONJUNCTION formula RPAREN
    (19) conjunction -> . formula CONJUNCTION formula
    (20) disjunction -> . LPAREN formula DISJUNCTION formula RPAREN
    (21) disjunction -> . formula DISJUNCTION formula
    (22) implication -> . LPAREN formula IMPLICATION formula RPAREN
    (23) implication -> . formula IMPLICATION formula
    (24) equivalence -> . LPAREN formula EQUIVALENCE formula RPAREN
    (25) equivalence -> . formula EQUIVALENCE formula
    (15) quantified_formula -> . all_quantified_formula
    (16) quantified_formula -> . exist_quantified_formula
    (11) all_quantified_formula -> . ALL variable_seq formula
    (12) all_quantified_formula -> . ALL variable_seq COMMA formula
    (13) exist_quantified_formula -> . EXISTS variable_seq formula
    (14) exist_quantified_formula -> . EXISTS variable_seq COMMA formula

    PREDICATE       shift and go to state 9
    NEGATION        shift and go to state 11
    LPAREN          shift and go to state 10
    ALL             shift and go to state 14
    EXISTS          shift and go to state 15

    formula                        shift and go to state 27
    atom                           shift and go to state 2
    negation                       shift and go to state 3
    conjunction                    shift and go to state 4
    disjunction                    shift and go to state 5
    implication                    shift and go to state 6
    equivalence                    shift and go to state 7
    quantified_formula             shift and go to state 8
    all_quantified_formula         shift and go to state 12
    exist_quantified_formula       shift and go to state 13

state 18

    (23) implication -> formula IMPLICATION . formula
    (1) formula -> . atom
    (2) formula -> . negation
    (3) formula -> . conjunction
    (4) formula -> . disjunction
    (5) formula -> . implication
    (6) formula -> . equivalence
    (7) formula -> . quantified_formula
    (10) atom -> . PREDICATE LPAREN variable_seq RPAREN
    (17) negation -> . NEGATION formula
    (18) conjunction -> . LPAREN formula CONJUNCTION formula RPAREN
    (19) conjunction -> . formula CONJUNCTION formula
    (20) disjunction -> . LPAREN formula DISJUNCTION formula RPAREN
    (21) disjunction -> . formula DISJUNCTION formula
    (22) implication -> . LPAREN formula IMPLICATION formula RPAREN
    (23) implication -> . formula IMPLICATION formula
    (24) equivalence -> . LPAREN formula EQUIVALENCE formula RPAREN
    (25) equivalence -> . formula EQUIVALENCE formula
    (15) quantified_formula -> . all_quantified_formula
    (16) quantified_formula -> . exist_quantified_formula
    (11) all_quantified_formula -> . ALL variable_seq formula
    (12) all_quantified_formula -> . ALL variable_seq COMMA formula
    (13) exist_quantified_formula -> . EXISTS variable_seq formula
    (14) exist_quantified_formula -> . EXISTS variable_seq COMMA formula

    PREDICATE       shift and go to state 9
    NEGATION        shift and go to state 11
    LPAREN          shift and go to state 10
    ALL             shift and go to state 14
    EXISTS          shift and go to state 15

    formula                        shift and go to state 28
    atom                           shift and go to state 2
    negation                       shift and go to state 3
    conjunction                    shift and go to state 4
    disjunction                    shift and go to state 5
    implication                    shift and go to state 6
    equivalence                    shift and go to state 7
    quantified_formula             shift and go to state 8
    all_quantified_formula         shift and go to state 12
    exist_quantified_formula       shift and go to state 13

state 19

    (25) equivalence -> formula EQUIVALENCE . formula
    (1) formula -> . atom
    (2) formula -> . negation
    (3) formula -> . conjunction
    (4) formula -> . disjunction
    (5) formula -> . implication
    (6) formula -> . equivalence
    (7) formula -> . quantified_formula
    (10) atom -> . PREDICATE LPAREN variable_seq RPAREN
    (17) negation -> . NEGATION formula
    (18) conjunction -> . LPAREN formula CONJUNCTION formula RPAREN
    (19) conjunction -> . formula CONJUNCTION formula
    (20) disjunction -> . LPAREN formula DISJUNCTION formula RPAREN
    (21) disjunction -> . formula DISJUNCTION formula
    (22) implication -> . LPAREN formula IMPLICATION formula RPAREN
    (23) implication -> . formula IMPLICATION formula
    (24) equivalence -> . LPAREN formula EQUIVALENCE formula RPAREN
    (25) equivalence -> . formula EQUIVALENCE formula
    (15) quantified_formula -> . all_quantified_formula
    (16) quantified_formula -> . exist_quantified_formula
    (11) all_quantified_formula -> . ALL variable_seq formula
    (12) all_quantified_formula -> . ALL variable_seq COMMA formula
    (13) exist_quantified_formula -> . EXISTS variable_seq formula
    (14) exist_quantified_formula -> . EXISTS variable_seq COMMA formula

    PREDICATE       shift and go to state 9
    NEGATION        shift and go to state 11
    LPAREN          shift and go to state 10
    ALL             shift and go to state 14
    EXISTS          shift and go to state 15

    formula                        shift and go to state 29
    atom                           shift and go to state 2
    negation                       shift and go to state 3
    conjunction                    shift and go to state 4
    disjunction                    shift and go to state 5
    implication                    shift and go to state 6
    equivalence                    shift and go to state 7
    quantified_formula             shift and go to state 8
    all_quantified_formula         shift and go to state 12
    exist_quantified_formula       shift and go to state 13

state 20

    (10) atom -> PREDICATE LPAREN . variable_seq RPAREN
    (8) variable_seq -> . VARIABLE
    (9) variable_seq -> . VARIABLE COMMA variable_seq

    VARIABLE        shift and go to state 24

    variable_seq                   shift and go to state 30

state 21

    (18) conjunction -> LPAREN formula . CONJUNCTION formula RPAREN
    (20) disjunction -> LPAREN formula . DISJUNCTION formula RPAREN
    (22) implication -> LPAREN formula . IMPLICATION formula RPAREN
    (24) equivalence -> LPAREN formula . EQUIVALENCE formula RPAREN
    (19) conjunction -> formula . CONJUNCTION formula
    (21) disjunction -> formula . DISJUNCTION formula
    (23) implication -> formula . IMPLICATION formula
    (25) equivalence -> formula . EQUIVALENCE formula

    CONJUNCTION     shift and go to state 31
    DISJUNCTION     shift and go to state 32
    IMPLICATION     shift and go to state 33
    EQUIVALENCE     shift and go to state 34


state 22

    (17) negation -> NEGATION formula .
    (19) conjunction -> formula . CONJUNCTION formula
    (21) disjunction -> formula . DISJUNCTION formula
    (23) implication -> formula . IMPLICATION formula
    (25) equivalence -> formula . EQUIVALENCE formula

    CONJUNCTION     reduce using rule 17 (negation -> NEGATION formula .)
    DISJUNCTION     reduce using rule 17 (negation -> NEGATION formula .)
    IMPLICATION     reduce using rule 17 (negation -> NEGATION formula .)
    EQUIVALENCE     reduce using rule 17 (negation -> NEGATION formula .)
    $end            reduce using rule 17 (negation -> NEGATION formula .)
    RPAREN          reduce using rule 17 (negation -> NEGATION formula .)

  ! CONJUNCTION     [ shift and go to state 16 ]
  ! DISJUNCTION     [ shift and go to state 17 ]
  ! IMPLICATION     [ shift and go to state 18 ]
  ! EQUIVALENCE     [ shift and go to state 19 ]


state 23

    (11) all_quantified_formula -> ALL variable_seq . formula
    (12) all_quantified_formula -> ALL variable_seq . COMMA formula
    (1) formula -> . atom
    (2) formula -> . negation
    (3) formula -> . conjunction
    (4) formula -> . disjunction
    (5) formula -> . implication
    (6) formula -> . equivalence
    (7) formula -> . quantified_formula
    (10) atom -> . PREDICATE LPAREN variable_seq RPAREN
    (17) negation -> . NEGATION formula
    (18) conjunction -> . LPAREN formula CONJUNCTION formula RPAREN
    (19) conjunction -> . formula CONJUNCTION formula
    (20) disjunction -> . LPAREN formula DISJUNCTION formula RPAREN
    (21) disjunction -> . formula DISJUNCTION formula
    (22) implication -> . LPAREN formula IMPLICATION formula RPAREN
    (23) implication -> . formula IMPLICATION formula
    (24) equivalence -> . LPAREN formula EQUIVALENCE formula RPAREN
    (25) equivalence -> . formula EQUIVALENCE formula
    (15) quantified_formula -> . all_quantified_formula
    (16) quantified_formula -> . exist_quantified_formula
    (11) all_quantified_formula -> . ALL variable_seq formula
    (12) all_quantified_formula -> . ALL variable_seq COMMA formula
    (13) exist_quantified_formula -> . EXISTS variable_seq formula
    (14) exist_quantified_formula -> . EXISTS variable_seq COMMA formula

    COMMA           shift and go to state 36
    PREDICATE       shift and go to state 9
    NEGATION        shift and go to state 11
    LPAREN          shift and go to state 10
    ALL             shift and go to state 14
    EXISTS          shift and go to state 15

    formula                        shift and go to state 35
    atom                           shift and go to state 2
    negation                       shift and go to state 3
    conjunction                    shift and go to state 4
    disjunction                    shift and go to state 5
    implication                    shift and go to state 6
    equivalence                    shift and go to state 7
    quantified_formula             shift and go to state 8
    all_quantified_formula         shift and go to state 12
    exist_quantified_formula       shift and go to state 13

state 24

    (8) variable_seq -> VARIABLE .
    (9) variable_seq -> VARIABLE . COMMA variable_seq

  ! shift/reduce conflict for COMMA resolved as shift
    PREDICATE       reduce using rule 8 (variable_seq -> VARIABLE .)
    NEGATION        reduce using rule 8 (variable_seq -> VARIABLE .)
    LPAREN          reduce using rule 8 (variable_seq -> VARIABLE .)
    ALL             reduce using rule 8 (variable_seq -> VARIABLE .)
    EXISTS          reduce using rule 8 (variable_seq -> VARIABLE .)
    RPAREN          reduce using rule 8 (variable_seq -> VARIABLE .)
    COMMA           shift and go to state 37

  ! COMMA           [ reduce using rule 8 (variable_seq -> VARIABLE .) ]


state 25

    (13) exist_quantified_formula -> EXISTS variable_seq . formula
    (14) exist_quantified_formula -> EXISTS variable_seq . COMMA formula
    (1) formula -> . atom
    (2) formula -> . negation
    (3) formula -> . conjunction
    (4) formula -> . disjunction
    (5) formula -> . implication
    (6) formula -> . equivalence
    (7) formula -> . quantified_formula
    (10) atom -> . PREDICATE LPAREN variable_seq RPAREN
    (17) negation -> . NEGATION formula
    (18) conjunction -> . LPAREN formula CONJUNCTION formula RPAREN
    (19) conjunction -> . formula CONJUNCTION formula
    (20) disjunction -> . LPAREN formula DISJUNCTION formula RPAREN
    (21) disjunction -> . formula DISJUNCTION formula
    (22) implication -> . LPAREN formula IMPLICATION formula RPAREN
    (23) implication -> . formula IMPLICATION formula
    (24) equivalence -> . LPAREN formula EQUIVALENCE formula RPAREN
    (25) equivalence -> . formula EQUIVALENCE formula
    (15) quantified_formula -> . all_quantified_formula
    (16) quantified_formula -> . exist_quantified_formula
    (11) all_quantified_formula -> . ALL variable_seq formula
    (12) all_quantified_formula -> . ALL variable_seq COMMA formula
    (13) exist_quantified_formula -> . EXISTS variable_seq formula
    (14) exist_quantified_formula -> . EXISTS variable_seq COMMA formula

    COMMA           shift and go to state 39
    PREDICATE       shift and go to state 9
    NEGATION        shift and go to state 11
    LPAREN          shift and go to state 10
    ALL             shift and go to state 14
    EXISTS          shift and go to state 15

    formula                        shift and go to state 38
    atom                           shift and go to state 2
    negation                       shift and go to state 3
    conjunction                    shift and go to state 4
    disjunction                    shift and go to state 5
    implication                    shift and go to state 6
    equivalence                    shift and go to state 7
    quantified_formula             shift and go to state 8
    all_quantified_formula         shift and go to state 12
    exist_quantified_formula       shift and go to state 13

state 26

    (19) conjunction -> formula CONJUNCTION formula .
    (19) conjunction -> formula . CONJUNCTION formula
    (21) disjunction -> formula . DISJUNCTION formula
    (23) implication -> formula . IMPLICATION formula
    (25) equivalence -> formula . EQUIVALENCE formula

    CONJUNCTION     reduce using rule 19 (conjunction -> formula CONJUNCTION formula .)
    DISJUNCTION     reduce using rule 19 (conjunction -> formula CONJUNCTION formula .)
    IMPLICATION     reduce using rule 19 (conjunction -> formula CONJUNCTION formula .)
    EQUIVALENCE     reduce using rule 19 (conjunction -> formula CONJUNCTION formula .)
    $end            reduce using rule 19 (conjunction -> formula CONJUNCTION formula .)
    RPAREN          reduce using rule 19 (conjunction -> formula CONJUNCTION formula .)

  ! CONJUNCTION     [ shift and go to state 16 ]
  ! DISJUNCTION     [ shift and go to state 17 ]
  ! IMPLICATION     [ shift and go to state 18 ]
  ! EQUIVALENCE     [ shift and go to state 19 ]


state 27

    (21) disjunction -> formula DISJUNCTION formula .
    (19) conjunction -> formula . CONJUNCTION formula
    (21) disjunction -> formula . DISJUNCTION formula
    (23) implication -> formula . IMPLICATION formula
    (25) equivalence -> formula . EQUIVALENCE formula

    DISJUNCTION     reduce using rule 21 (disjunction -> formula DISJUNCTION formula .)
    IMPLICATION     reduce using rule 21 (disjunction -> formula DISJUNCTION formula .)
    EQUIVALENCE     reduce using rule 21 (disjunction -> formula DISJUNCTION formula .)
    $end            reduce using rule 21 (disjunction -> formula DISJUNCTION formula .)
    RPAREN          reduce using rule 21 (disjunction -> formula DISJUNCTION formula .)
    CONJUNCTION     shift and go to state 16

  ! CONJUNCTION     [ reduce using rule 21 (disjunction -> formula DISJUNCTION formula .) ]
  ! DISJUNCTION     [ shift and go to state 17 ]
  ! IMPLICATION     [ shift and go to state 18 ]
  ! EQUIVALENCE     [ shift and go to state 19 ]


state 28

    (23) implication -> formula IMPLICATION formula .
    (19) conjunction -> formula . CONJUNCTION formula
    (21) disjunction -> formula . DISJUNCTION formula
    (23) implication -> formula . IMPLICATION formula
    (25) equivalence -> formula . EQUIVALENCE formula

    IMPLICATION     reduce using rule 23 (implication -> formula IMPLICATION formula .)
    EQUIVALENCE     reduce using rule 23 (implication -> formula IMPLICATION formula .)
    $end            reduce using rule 23 (implication -> formula IMPLICATION formula .)
    RPAREN          reduce using rule 23 (implication -> formula IMPLICATION formula .)
    CONJUNCTION     shift and go to state 16
    DISJUNCTION     shift and go to state 17

  ! CONJUNCTION     [ reduce using rule 23 (implication -> formula IMPLICATION formula .) ]
  ! DISJUNCTION     [ reduce using rule 23 (implication -> formula IMPLICATION formula .) ]
  ! IMPLICATION     [ shift and go to state 18 ]
  ! EQUIVALENCE     [ shift and go to state 19 ]


state 29

    (25) equivalence -> formula EQUIVALENCE formula .
    (19) conjunction -> formula . CONJUNCTION formula
    (21) disjunction -> formula . DISJUNCTION formula
    (23) implication -> formula . IMPLICATION formula
    (25) equivalence -> formula . EQUIVALENCE formula

    EQUIVALENCE     reduce using rule 25 (equivalence -> formula EQUIVALENCE formula .)
    $end            reduce using rule 25 (equivalence -> formula EQUIVALENCE formula .)
    RPAREN          reduce using rule 25 (equivalence -> formula EQUIVALENCE formula .)
    CONJUNCTION     shift and go to state 16
    DISJUNCTION     shift and go to state 17
    IMPLICATION     shift and go to state 18

  ! CONJUNCTION     [ reduce using rule 25 (equivalence -> formula EQUIVALENCE formula .) ]
  ! DISJUNCTION     [ reduce using rule 25 (equivalence -> formula EQUIVALENCE formula .) ]
  ! IMPLICATION     [ reduce using rule 25 (equivalence -> formula EQUIVALENCE formula .) ]
  ! EQUIVALENCE     [ shift and go to state 19 ]


state 30

    (10) atom -> PREDICATE LPAREN variable_seq . RPAREN

    RPAREN          shift and go to state 40


state 31

    (18) conjunction -> LPAREN formula CONJUNCTION . formula RPAREN
    (19) conjunction -> formula CONJUNCTION . formula
    (1) formula -> . atom
    (2) formula -> . negation
    (3) formula -> . conjunction
    (4) formula -> . disjunction
    (5) formula -> . implication
    (6) formula -> . equivalence
    (7) formula -> . quantified_formula
    (10) atom -> . PREDICATE LPAREN variable_seq RPAREN
    (17) negation -> . NEGATION formula
    (18) conjunction -> . LPAREN formula CONJUNCTION formula RPAREN
    (19) conjunction -> . formula CONJUNCTION formula
    (20) disjunction -> . LPAREN formula DISJUNCTION formula RPAREN
    (21) disjunction -> . formula DISJUNCTION formula
    (22) implication -> . LPAREN formula IMPLICATION formula RPAREN
    (23) implication -> . formula IMPLICATION formula
    (24) equivalence -> . LPAREN formula EQUIVALENCE formula RPAREN
    (25) equivalence -> . formula EQUIVALENCE formula
    (15) quantified_formula -> . all_quantified_formula
    (16) quantified_formula -> . exist_quantified_formula
    (11) all_quantified_formula -> . ALL variable_seq formula
    (12) all_quantified_formula -> . ALL variable_seq COMMA formula
    (13) exist_quantified_formula -> . EXISTS variable_seq formula
    (14) exist_quantified_formula -> . EXISTS variable_seq COMMA formula

    PREDICATE       shift and go to state 9
    NEGATION        shift and go to state 11
    LPAREN          shift and go to state 10
    ALL             shift and go to state 14
    EXISTS          shift and go to state 15

    formula                        shift and go to state 41
    atom                           shift and go to state 2
    negation                       shift and go to state 3
    conjunction                    shift and go to state 4
    disjunction                    shift and go to state 5
    implication                    shift and go to state 6
    equivalence                    shift and go to state 7
    quantified_formula             shift and go to state 8
    all_quantified_formula         shift and go to state 12
    exist_quantified_formula       shift and go to state 13

state 32

    (20) disjunction -> LPAREN formula DISJUNCTION . formula RPAREN
    (21) disjunction -> formula DISJUNCTION . formula
    (1) formula -> . atom
    (2) formula -> . negation
    (3) formula -> . conjunction
    (4) formula -> . disjunction
    (5) formula -> . implication
    (6) formula -> . equivalence
    (7) formula -> . quantified_formula
    (10) atom -> . PREDICATE LPAREN variable_seq RPAREN
    (17) negation -> . NEGATION formula
    (18) conjunction -> . LPAREN formula CONJUNCTION formula RPAREN
    (19) conjunction -> . formula CONJUNCTION formula
    (20) disjunction -> . LPAREN formula DISJUNCTION formula RPAREN
    (21) disjunction -> . formula DISJUNCTION formula
    (22) implication -> . LPAREN formula IMPLICATION formula RPAREN
    (23) implication -> . formula IMPLICATION formula
    (24) equivalence -> . LPAREN formula EQUIVALENCE formula RPAREN
    (25) equivalence -> . formula EQUIVALENCE formula
    (15) quantified_formula -> . all_quantified_formula
    (16) quantified_formula -> . exist_quantified_formula
    (11) all_quantified_formula -> . ALL variable_seq formula
    (12) all_quantified_formula -> . ALL variable_seq COMMA formula
    (13) exist_quantified_formula -> . EXISTS variable_seq formula
    (14) exist_quantified_formula -> . EXISTS variable_seq COMMA formula

    PREDICATE       shift and go to state 9
    NEGATION        shift and go to state 11
    LPAREN          shift and go to state 10
    ALL             shift and go to state 14
    EXISTS          shift and go to state 15

    formula                        shift and go to state 42
    atom                           shift and go to state 2
    negation                       shift and go to state 3
    conjunction                    shift and go to state 4
    disjunction                    shift and go to state 5
    implication                    shift and go to state 6
    equivalence                    shift and go to state 7
    quantified_formula             shift and go to state 8
    all_quantified_formula         shift and go to state 12
    exist_quantified_formula       shift and go to state 13

state 33

    (22) implication -> LPAREN formula IMPLICATION . formula RPAREN
    (23) implication -> formula IMPLICATION . formula
    (1) formula -> . atom
    (2) formula -> . negation
    (3) formula -> . conjunction
    (4) formula -> . disjunction
    (5) formula -> . implication
    (6) formula -> . equivalence
    (7) formula -> . quantified_formula
    (10) atom -> . PREDICATE LPAREN variable_seq RPAREN
    (17) negation -> . NEGATION formula
    (18) conjunction -> . LPAREN formula CONJUNCTION formula RPAREN
    (19) conjunction -> . formula CONJUNCTION formula
    (20) disjunction -> . LPAREN formula DISJUNCTION formula RPAREN
    (21) disjunction -> . formula DISJUNCTION formula
    (22) implication -> . LPAREN formula IMPLICATION formula RPAREN
    (23) implication -> . formula IMPLICATION formula
    (24) equivalence -> . LPAREN formula EQUIVALENCE formula RPAREN
    (25) equivalence -> . formula EQUIVALENCE formula
    (15) quantified_formula -> . all_quantified_formula
    (16) quantified_formula -> . exist_quantified_formula
    (11) all_quantified_formula -> . ALL variable_seq formula
    (12) all_quantified_formula -> . ALL variable_seq COMMA formula
    (13) exist_quantified_formula -> . EXISTS variable_seq formula
    (14) exist_quantified_formula -> . EXISTS variable_seq COMMA formula

    PREDICATE       shift and go to state 9
    NEGATION        shift and go to state 11
    LPAREN          shift and go to state 10
    ALL             shift and go to state 14
    EXISTS          shift and go to state 15

    formula                        shift and go to state 43
    atom                           shift and go to state 2
    negation                       shift and go to state 3
    conjunction                    shift and go to state 4
    disjunction                    shift and go to state 5
    implication                    shift and go to state 6
    equivalence                    shift and go to state 7
    quantified_formula             shift and go to state 8
    all_quantified_formula         shift and go to state 12
    exist_quantified_formula       shift and go to state 13

state 34

    (24) equivalence -> LPAREN formula EQUIVALENCE . formula RPAREN
    (25) equivalence -> formula EQUIVALENCE . formula
    (1) formula -> . atom
    (2) formula -> . negation
    (3) formula -> . conjunction
    (4) formula -> . disjunction
    (5) formula -> . implication
    (6) formula -> . equivalence
    (7) formula -> . quantified_formula
    (10) atom -> . PREDICATE LPAREN variable_seq RPAREN
    (17) negation -> . NEGATION formula
    (18) conjunction -> . LPAREN formula CONJUNCTION formula RPAREN
    (19) conjunction -> . formula CONJUNCTION formula
    (20) disjunction -> . LPAREN formula DISJUNCTION formula RPAREN
    (21) disjunction -> . formula DISJUNCTION formula
    (22) implication -> . LPAREN formula IMPLICATION formula RPAREN
    (23) implication -> . formula IMPLICATION formula
    (24) equivalence -> . LPAREN formula EQUIVALENCE formula RPAREN
    (25) equivalence -> . formula EQUIVALENCE formula
    (15) quantified_formula -> . all_quantified_formula
    (16) quantified_formula -> . exist_quantified_formula
    (11) all_quantified_formula -> . ALL variable_seq formula
    (12) all_quantified_formula -> . ALL variable_seq COMMA formula
    (13) exist_quantified_formula -> . EXISTS variable_seq formula
    (14) exist_quantified_formula -> . EXISTS variable_seq COMMA formula

    PREDICATE       shift and go to state 9
    NEGATION        shift and go to state 11
    LPAREN          shift and go to state 10
    ALL             shift and go to state 14
    EXISTS          shift and go to state 15

    formula                        shift and go to state 44
    atom                           shift and go to state 2
    negation                       shift and go to state 3
    conjunction                    shift and go to state 4
    disjunction                    shift and go to state 5
    implication                    shift and go to state 6
    equivalence                    shift and go to state 7
    quantified_formula             shift and go to state 8
    all_quantified_formula         shift and go to state 12
    exist_quantified_formula       shift and go to state 13

state 35

    (11) all_quantified_formula -> ALL variable_seq formula .
    (19) conjunction -> formula . CONJUNCTION formula
    (21) disjunction -> formula . DISJUNCTION formula
    (23) implication -> formula . IMPLICATION formula
    (25) equivalence -> formula . EQUIVALENCE formula

    CONJUNCTION     reduce using rule 11 (all_quantified_formula -> ALL variable_seq formula .)
    DISJUNCTION     reduce using rule 11 (all_quantified_formula -> ALL variable_seq formula .)
    IMPLICATION     reduce using rule 11 (all_quantified_formula -> ALL variable_seq formula .)
    EQUIVALENCE     reduce using rule 11 (all_quantified_formula -> ALL variable_seq formula .)
    $end            reduce using rule 11 (all_quantified_formula -> ALL variable_seq formula .)
    RPAREN          reduce using rule 11 (all_quantified_formula -> ALL variable_seq formula .)

  ! CONJUNCTION     [ shift and go to state 16 ]
  ! DISJUNCTION     [ shift and go to state 17 ]
  ! IMPLICATION     [ shift and go to state 18 ]
  ! EQUIVALENCE     [ shift and go to state 19 ]


state 36

    (12) all_quantified_formula -> ALL variable_seq COMMA . formula
    (1) formula -> . atom
    (2) formula -> . negation
    (3) formula -> . conjunction
    (4) formula -> . disjunction
    (5) formula -> . implication
    (6) formula -> . equivalence
    (7) formula -> . quantified_formula
    (10) atom -> . PREDICATE LPAREN variable_seq RPAREN
    (17) negation -> . NEGATION formula
    (18) conjunction -> . LPAREN formula CONJUNCTION formula RPAREN
    (19) conjunction -> . formula CONJUNCTION formula
    (20) disjunction -> . LPAREN formula DISJUNCTION formula RPAREN
    (21) disjunction -> . formula DISJUNCTION formula
    (22) implication -> . LPAREN formula IMPLICATION formula RPAREN
    (23) implication -> . formula IMPLICATION formula
    (24) equivalence -> . LPAREN formula EQUIVALENCE formula RPAREN
    (25) equivalence -> . formula EQUIVALENCE formula
    (15) quantified_formula -> . all_quantified_formula
    (16) quantified_formula -> . exist_quantified_formula
    (11) all_quantified_formula -> . ALL variable_seq formula
    (12) all_quantified_formula -> . ALL variable_seq COMMA formula
    (13) exist_quantified_formula -> . EXISTS variable_seq formula
    (14) exist_quantified_formula -> . EXISTS variable_seq COMMA formula

    PREDICATE       shift and go to state 9
    NEGATION        shift and go to state 11
    LPAREN          shift and go to state 10
    ALL             shift and go to state 14
    EXISTS          shift and go to state 15

    formula                        shift and go to state 45
    atom                           shift and go to state 2
    negation                       shift and go to state 3
    conjunction                    shift and go to state 4
    disjunction                    shift and go to state 5
    implication                    shift and go to state 6
    equivalence                    shift and go to state 7
    quantified_formula             shift and go to state 8
    all_quantified_formula         shift and go to state 12
    exist_quantified_formula       shift and go to state 13

state 37

    (9) variable_seq -> VARIABLE COMMA . variable_seq
    (8) variable_seq -> . VARIABLE
    (9) variable_seq -> . VARIABLE COMMA variable_seq

    VARIABLE        shift and go to state 24

    variable_seq                   shift and go to state 46

state 38

    (13) exist_quantified_formula -> EXISTS variable_seq formula .
    (19) conjunction -> formula . CONJUNCTION formula
    (21) disjunction -> formula . DISJUNCTION formula
    (23) implication -> formula . IMPLICATION formula
    (25) equivalence -> formula . EQUIVALENCE formula

    CONJUNCTION     reduce using rule 13 (exist_quantified_formula -> EXISTS variable_seq formula .)
    DISJUNCTION     reduce using rule 13 (exist_quantified_formula -> EXISTS variable_seq formula .)
    IMPLICATION     reduce using rule 13 (exist_quantified_formula -> EXISTS variable_seq formula .)
    EQUIVALENCE     reduce using rule 13 (exist_quantified_formula -> EXISTS variable_seq formula .)
    $end            reduce using rule 13 (exist_quantified_formula -> EXISTS variable_seq formula .)
    RPAREN          reduce using rule 13 (exist_quantified_formula -> EXISTS variable_seq formula .)

  ! CONJUNCTION     [ shift and go to state 16 ]
  ! DISJUNCTION     [ shift and go to state 17 ]
  ! IMPLICATION     [ shift and go to state 18 ]
  ! EQUIVALENCE     [ shift and go to state 19 ]


state 39

    (14) exist_quantified_formula -> EXISTS variable_seq COMMA . formula
    (1) formula -> . atom
    (2) formula -> . negation
    (3) formula -> . conjunction
    (4) formula -> . disjunction
    (5) formula -> . implication
    (6) formula -> . equivalence
    (7) formula -> . quantified_formula
    (10) atom -> . PREDICATE LPAREN variable_seq RPAREN
    (17) negation -> . NEGATION formula
    (18) conjunction -> . LPAREN formula CONJUNCTION formula RPAREN
    (19) conjunction -> . formula CONJUNCTION formula
    (20) disjunction -> . LPAREN formula DISJUNCTION formula RPAREN
    (21) disjunction -> . formula DISJUNCTION formula
    (22) implication -> . LPAREN formula IMPLICATION formula RPAREN
    (23) implication -> . formula IMPLICATION formula
    (24) equivalence -> . LPAREN formula EQUIVALENCE formula RPAREN
    (25) equivalence -> . formula EQUIVALENCE formula
    (15) quantified_formula -> . all_quantified_formula
    (16) quantified_formula -> . exist_quantified_formula
    (11) all_quantified_formula -> . ALL variable_seq formula
    (12) all_quantified_formula -> . ALL variable_seq COMMA formula
    (13) exist_quantified_formula -> . EXISTS variable_seq formula
    (14) exist_quantified_formula -> . EXISTS variable_seq COMMA formula

    PREDICATE       shift and go to state 9
    NEGATION        shift and go to state 11
    LPAREN          shift and go to state 10
    ALL             shift and go to state 14
    EXISTS          shift and go to state 15

    formula                        shift and go to state 47
    atom                           shift and go to state 2
    negation                       shift and go to state 3
    conjunction                    shift and go to state 4
    disjunction                    shift and go to state 5
    implication                    shift and go to state 6
    equivalence                    shift and go to state 7
    quantified_formula             shift and go to state 8
    all_quantified_formula         shift and go to state 12
    exist_quantified_formula       shift and go to state 13

state 40

    (10) atom -> PREDICATE LPAREN variable_seq RPAREN .

    CONJUNCTION     reduce using rule 10 (atom -> PREDICATE LPAREN variable_seq RPAREN .)
    DISJUNCTION     reduce using rule 10 (atom -> PREDICATE LPAREN variable_seq RPAREN .)
    IMPLICATION     reduce using rule 10 (atom -> PREDICATE LPAREN variable_seq RPAREN .)
    EQUIVALENCE     reduce using rule 10 (atom -> PREDICATE LPAREN variable_seq RPAREN .)
    $end            reduce using rule 10 (atom -> PREDICATE LPAREN variable_seq RPAREN .)
    RPAREN          reduce using rule 10 (atom -> PREDICATE LPAREN variable_seq RPAREN .)


state 41

    (18) conjunction -> LPAREN formula CONJUNCTION formula . RPAREN
    (19) conjunction -> formula CONJUNCTION formula .
    (19) conjunction -> formula . CONJUNCTION formula
    (21) disjunction -> formula . DISJUNCTION formula
    (23) implication -> formula . IMPLICATION formula
    (25) equivalence -> formula . EQUIVALENCE formula

    RPAREN          shift and go to state 48
    CONJUNCTION     reduce using rule 19 (conjunction -> formula CONJUNCTION formula .)
    DISJUNCTION     reduce using rule 19 (conjunction -> formula CONJUNCTION formula .)
    IMPLICATION     reduce using rule 19 (conjunction -> formula CONJUNCTION formula .)
    EQUIVALENCE     reduce using rule 19 (conjunction -> formula CONJUNCTION formula .)

  ! CONJUNCTION     [ shift and go to state 16 ]
  ! DISJUNCTION     [ shift and go to state 17 ]
  ! IMPLICATION     [ shift and go to state 18 ]
  ! EQUIVALENCE     [ shift and go to state 19 ]


state 42

    (20) disjunction -> LPAREN formula DISJUNCTION formula . RPAREN
    (21) disjunction -> formula DISJUNCTION formula .
    (19) conjunction -> formula . CONJUNCTION formula
    (21) disjunction -> formula . DISJUNCTION formula
    (23) implication -> formula . IMPLICATION formula
    (25) equivalence -> formula . EQUIVALENCE formula

    RPAREN          shift and go to state 49
    DISJUNCTION     reduce using rule 21 (disjunction -> formula DISJUNCTION formula .)
    IMPLICATION     reduce using rule 21 (disjunction -> formula DISJUNCTION formula .)
    EQUIVALENCE     reduce using rule 21 (disjunction -> formula DISJUNCTION formula .)
    CONJUNCTION     shift and go to state 16

  ! CONJUNCTION     [ reduce using rule 21 (disjunction -> formula DISJUNCTION formula .) ]
  ! DISJUNCTION     [ shift and go to state 17 ]
  ! IMPLICATION     [ shift and go to state 18 ]
  ! EQUIVALENCE     [ shift and go to state 19 ]


state 43

    (22) implication -> LPAREN formula IMPLICATION formula . RPAREN
    (23) implication -> formula IMPLICATION formula .
    (19) conjunction -> formula . CONJUNCTION formula
    (21) disjunction -> formula . DISJUNCTION formula
    (23) implication -> formula . IMPLICATION formula
    (25) equivalence -> formula . EQUIVALENCE formula

    RPAREN          shift and go to state 50
    IMPLICATION     reduce using rule 23 (implication -> formula IMPLICATION formula .)
    EQUIVALENCE     reduce using rule 23 (implication -> formula IMPLICATION formula .)
    CONJUNCTION     shift and go to state 16
    DISJUNCTION     shift and go to state 17

  ! CONJUNCTION     [ reduce using rule 23 (implication -> formula IMPLICATION formula .) ]
  ! DISJUNCTION     [ reduce using rule 23 (implication -> formula IMPLICATION formula .) ]
  ! IMPLICATION     [ shift and go to state 18 ]
  ! EQUIVALENCE     [ shift and go to state 19 ]


state 44

    (24) equivalence -> LPAREN formula EQUIVALENCE formula . RPAREN
    (25) equivalence -> formula EQUIVALENCE formula .
    (19) conjunction -> formula . CONJUNCTION formula
    (21) disjunction -> formula . DISJUNCTION formula
    (23) implication -> formula . IMPLICATION formula
    (25) equivalence -> formula . EQUIVALENCE formula

    RPAREN          shift and go to state 51
    EQUIVALENCE     reduce using rule 25 (equivalence -> formula EQUIVALENCE formula .)
    CONJUNCTION     shift and go to state 16
    DISJUNCTION     shift and go to state 17
    IMPLICATION     shift and go to state 18

  ! CONJUNCTION     [ reduce using rule 25 (equivalence -> formula EQUIVALENCE formula .) ]
  ! DISJUNCTION     [ reduce using rule 25 (equivalence -> formula EQUIVALENCE formula .) ]
  ! IMPLICATION     [ reduce using rule 25 (equivalence -> formula EQUIVALENCE formula .) ]
  ! EQUIVALENCE     [ shift and go to state 19 ]


state 45

    (12) all_quantified_formula -> ALL variable_seq COMMA formula .
    (19) conjunction -> formula . CONJUNCTION formula
    (21) disjunction -> formula . DISJUNCTION formula
    (23) implication -> formula . IMPLICATION formula
    (25) equivalence -> formula . EQUIVALENCE formula

  ! shift/reduce conflict for CONJUNCTION resolved as shift
  ! shift/reduce conflict for DISJUNCTION resolved as shift
  ! shift/reduce conflict for IMPLICATION resolved as shift
  ! shift/reduce conflict for EQUIVALENCE resolved as shift
    $end            reduce using rule 12 (all_quantified_formula -> ALL variable_seq COMMA formula .)
    RPAREN          reduce using rule 12 (all_quantified_formula -> ALL variable_seq COMMA formula .)
    CONJUNCTION     shift and go to state 16
    DISJUNCTION     shift and go to state 17
    IMPLICATION     shift and go to state 18
    EQUIVALENCE     shift and go to state 19

  ! CONJUNCTION     [ reduce using rule 12 (all_quantified_formula -> ALL variable_seq COMMA formula .) ]
  ! DISJUNCTION     [ reduce using rule 12 (all_quantified_formula -> ALL variable_seq COMMA formula .) ]
  ! IMPLICATION     [ reduce using rule 12 (all_quantified_formula -> ALL variable_seq COMMA formula .) ]
  ! EQUIVALENCE     [ reduce using rule 12 (all_quantified_formula -> ALL variable_seq COMMA formula .) ]


state 46

    (9) variable_seq -> VARIABLE COMMA variable_seq .

    COMMA           reduce using rule 9 (variable_seq -> VARIABLE COMMA variable_seq .)
    PREDICATE       reduce using rule 9 (variable_seq -> VARIABLE COMMA variable_seq .)
    NEGATION        reduce using rule 9 (variable_seq -> VARIABLE COMMA variable_seq .)
    LPAREN          reduce using rule 9 (variable_seq -> VARIABLE COMMA variable_seq .)
    ALL             reduce using rule 9 (variable_seq -> VARIABLE COMMA variable_seq .)
    EXISTS          reduce using rule 9 (variable_seq -> VARIABLE COMMA variable_seq .)
    RPAREN          reduce using rule 9 (variable_seq -> VARIABLE COMMA variable_seq .)


state 47

    (14) exist_quantified_formula -> EXISTS variable_seq COMMA formula .
    (19) conjunction -> formula . CONJUNCTION formula
    (21) disjunction -> formula . DISJUNCTION formula
    (23) implication -> formula . IMPLICATION formula
    (25) equivalence -> formula . EQUIVALENCE formula

  ! shift/reduce conflict for CONJUNCTION resolved as shift
  ! shift/reduce conflict for DISJUNCTION resolved as shift
  ! shift/reduce conflict for IMPLICATION resolved as shift
  ! shift/reduce conflict for EQUIVALENCE resolved as shift
    $end            reduce using rule 14 (exist_quantified_formula -> EXISTS variable_seq COMMA formula .)
    RPAREN          reduce using rule 14 (exist_quantified_formula -> EXISTS variable_seq COMMA formula .)
    CONJUNCTION     shift and go to state 16
    DISJUNCTION     shift and go to state 17
    IMPLICATION     shift and go to state 18
    EQUIVALENCE     shift and go to state 19

  ! CONJUNCTION     [ reduce using rule 14 (exist_quantified_formula -> EXISTS variable_seq COMMA formula .) ]
  ! DISJUNCTION     [ reduce using rule 14 (exist_quantified_formula -> EXISTS variable_seq COMMA formula .) ]
  ! IMPLICATION     [ reduce using rule 14 (exist_quantified_formula -> EXISTS variable_seq COMMA formula .) ]
  ! EQUIVALENCE     [ reduce using rule 14 (exist_quantified_formula -> EXISTS variable_seq COMMA formula .) ]


state 48

    (18) conjunction -> LPAREN formula CONJUNCTION formula RPAREN .

    CONJUNCTION     reduce using rule 18 (conjunction -> LPAREN formula CONJUNCTION formula RPAREN .)
    DISJUNCTION     reduce using rule 18 (conjunction -> LPAREN formula CONJUNCTION formula RPAREN .)
    IMPLICATION     reduce using rule 18 (conjunction -> LPAREN formula CONJUNCTION formula RPAREN .)
    EQUIVALENCE     reduce using rule 18 (conjunction -> LPAREN formula CONJUNCTION formula RPAREN .)
    $end            reduce using rule 18 (conjunction -> LPAREN formula CONJUNCTION formula RPAREN .)
    RPAREN          reduce using rule 18 (conjunction -> LPAREN formula CONJUNCTION formula RPAREN .)


state 49

    (20) disjunction -> LPAREN formula DISJUNCTION formula RPAREN .

    CONJUNCTION     reduce using rule 20 (disjunction -> LPAREN formula DISJUNCTION formula RPAREN .)
    DISJUNCTION     reduce using rule 20 (disjunction -> LPAREN formula DISJUNCTION formula RPAREN .)
    IMPLICATION     reduce using rule 20 (disjunction -> LPAREN formula DISJUNCTION formula RPAREN .)
    EQUIVALENCE     reduce using rule 20 (disjunction -> LPAREN formula DISJUNCTION formula RPAREN .)
    $end            reduce using rule 20 (disjunction -> LPAREN formula DISJUNCTION formula RPAREN .)
    RPAREN          reduce using rule 20 (disjunction -> LPAREN formula DISJUNCTION formula RPAREN .)


state 50

    (22) implication -> LPAREN formula IMPLICATION formula RPAREN .

    CONJUNCTION     reduce using rule 22 (implication -> LPAREN formula IMPLICATION formula RPAREN .)
    DISJUNCTION     reduce using rule 22 (implication -> LPAREN formula IMPLICATION formula RPAREN .)
    IMPLICATION     reduce using rule 22 (implication -> LPAREN formula IMPLICATION formula RPAREN .)
    EQUIVALENCE     reduce using rule 22 (implication -> LPAREN formula IMPLICATION formula RPAREN .)
    $end            reduce using rule 22 (implication -> LPAREN formula IMPLICATION formula RPAREN .)
    RPAREN          reduce using rule 22 (implication -> LPAREN formula IMPLICATION formula RPAREN .)


state 51

    (24) equivalence -> LPAREN formula EQUIVALENCE formula RPAREN .

    CONJUNCTION     reduce using rule 24 (equivalence -> LPAREN formula EQUIVALENCE formula RPAREN .)
    DISJUNCTION     reduce using rule 24 (equivalence -> LPAREN formula EQUIVALENCE formula RPAREN .)
    IMPLICATION     reduce using rule 24 (equivalence -> LPAREN formula EQUIVALENCE formula RPAREN .)
    EQUIVALENCE     reduce using rule 24 (equivalence -> LPAREN formula EQUIVALENCE formula RPAREN .)
    $end            reduce using rule 24 (equivalence -> LPAREN formula EQUIVALENCE formula RPAREN .)
    RPAREN          reduce using rule 24 (equivalence -> LPAREN formula EQUIVALENCE formula RPAREN .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for COMMA in state 24 resolved as shift
WARNING: shift/reduce conflict for CONJUNCTION in state 45 resolved as shift
WARNING: shift/reduce conflict for DISJUNCTION in state 45 resolved as shift
WARNING: shift/reduce conflict for IMPLICATION in state 45 resolved as shift
WARNING: shift/reduce conflict for EQUIVALENCE in state 45 resolved as shift
WARNING: shift/reduce conflict for CONJUNCTION in state 47 resolved as shift
WARNING: shift/reduce conflict for DISJUNCTION in state 47 resolved as shift
WARNING: shift/reduce conflict for IMPLICATION in state 47 resolved as shift
WARNING: shift/reduce conflict for EQUIVALENCE in state 47 resolved as shift
